<?php
/**
 * Process Symptom Search API
 * This file handles the API request for searching diseases based on symptoms
 */

// Set content type to JSON
header('Content-Type: application/json');

// Disable error display to prevent HTML errors in JSON response
ini_set('display_errors', 0);
error_reporting(E_ALL);

// Custom error handler to capture errors and return them as JSON
function jsonErrorHandler($errno, $errstr, $errfile, $errline) {
    $error = [
        'error' => 'PHP Error: ' . $errstr,
        'file' => $errfile,
        'line' => $errline
    ];
    echo json_encode($error);
    exit;
}
set_error_handler('jsonErrorHandler');

try {
    // Start or resume session
    if (session_status() === PHP_SESSION_NONE) {
        session_start();
    }
    
    // Database connection
    $host = 'localhost';
    $dbname = 'palliative';
    $username = 'root';
    $password = '';
    
    try {
        $conn = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    } catch (PDOException $e) {
        throw new Exception("Database connection failed: " . $e->getMessage());
    }
    
    // Check if user is authenticated
    if (!isset($_SESSION['user_id']) || $_SESSION['user_type'] !== 'patient') {
        http_response_code(401);
        echo json_encode(['error' => 'Unauthorized']);
        exit;
    }

    // Get patient ID
    $patient_id = $_SESSION['user_id'];
    $stmt = $conn->prepare("SELECT id FROM patients WHERE user_id = ?");
    $stmt->execute([$patient_id]);
    $patient = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$patient) {
        http_response_code(400);
        echo json_encode(['error' => 'Patient not found']);
        exit;
    }

    // Check if required tables exist
    $tables_to_check = ['symptoms', 'diseases', 'disease_symptoms', 'disease_specializations', 'symptom_search_history'];
    $missing_tables = [];
    
    foreach ($tables_to_check as $table) {
        $stmt = $conn->prepare("SHOW TABLES LIKE ?");
        $stmt->execute([$table]);
        if ($stmt->rowCount() == 0) {
            $missing_tables[] = $table;
        }
    }
    
    if (!empty($missing_tables)) {
        // Create missing tables
        try {
            if (in_array('symptoms', $missing_tables)) {
                $conn->exec("
                    CREATE TABLE IF NOT EXISTS `symptoms` (
                      `id` int NOT NULL AUTO_INCREMENT,
                      `name` varchar(255) NOT NULL,
                      `description` text,
                      `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
                      `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                      PRIMARY KEY (`id`),
                      UNIQUE KEY `name` (`name`)
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
                ");
            }
            
            if (in_array('diseases', $missing_tables)) {
                $conn->exec("
                    CREATE TABLE IF NOT EXISTS `diseases` (
                      `id` int NOT NULL AUTO_INCREMENT,
                      `name` varchar(255) NOT NULL,
                      `description` text,
                      `treatment` text,
                      `severity_level` enum('low','medium','high') DEFAULT 'medium',
                      `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
                      `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                      PRIMARY KEY (`id`),
                      UNIQUE KEY `name` (`name`)
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
                ");
            }
            
            if (in_array('disease_symptoms', $missing_tables)) {
                $conn->exec("
                    CREATE TABLE IF NOT EXISTS `disease_symptoms` (
                      `id` int NOT NULL AUTO_INCREMENT,
                      `disease_id` int NOT NULL,
                      `symptom_id` int NOT NULL,
                      `severity` enum('mild','moderate','severe') DEFAULT 'moderate',
                      `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
                      PRIMARY KEY (`id`),
                      UNIQUE KEY `disease_symptom_unique` (`disease_id`,`symptom_id`),
                      KEY `symptom_id` (`symptom_id`)
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
                ");
            }
            
            if (in_array('disease_specializations', $missing_tables)) {
                $conn->exec("
                    CREATE TABLE IF NOT EXISTS `disease_specializations` (
                      `id` int NOT NULL AUTO_INCREMENT,
                      `disease_id` int NOT NULL,
                      `specialization` varchar(255) NOT NULL,
                      `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
                      PRIMARY KEY (`id`),
                      UNIQUE KEY `disease_specialization_unique` (`disease_id`,`specialization`)
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
                ");
            }
            
            if (in_array('symptom_search_history', $missing_tables)) {
                $conn->exec("
                    CREATE TABLE IF NOT EXISTS `symptom_search_history` (
                      `id` int NOT NULL AUTO_INCREMENT,
                      `patient_id` int NOT NULL,
                      `symptoms` text NOT NULL,
                      `diseases_found` text,
                      `recommended_doctors` text,
                      `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
                      PRIMARY KEY (`id`),
                      KEY `patient_id` (`patient_id`)
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
                ");
            }
            
            // Add some sample data if symptoms table is empty
            $stmt = $conn->prepare("SELECT COUNT(*) FROM symptoms");
            $stmt->execute();
            if ($stmt->fetchColumn() == 0) {
                // Insert sample symptoms
                $sample_symptoms = [
                    ['Fever', 'Elevated body temperature above normal range'],
                    ['Headache', 'Pain in the head or upper neck'],
                    ['Cough', 'Sudden expulsion of air from the lungs'],
                    ['Fatigue', 'Extreme tiredness resulting from mental or physical exertion'],
                    ['Nausea', 'Feeling of sickness with an inclination to vomit'],
                    ['Sore throat', 'Pain or irritation in the throat'],
                    ['Shortness of breath', 'Difficulty breathing or catching your breath'],
                    ['Chest pain', 'Discomfort or pain in the chest area'],
                    ['Dizziness', 'Feeling faint, woozy, or unsteady'],
                    ['Rash', 'Area of irritated or swollen skin']
                ];
                
                $stmt = $conn->prepare("INSERT INTO symptoms (name, description) VALUES (?, ?)");
                foreach ($sample_symptoms as $symptom) {
                    $stmt->execute($symptom);
                }
                
                // Insert sample diseases
                $sample_diseases = [
                    ['Common Cold', 'A viral infectious disease of the upper respiratory tract', 'Rest, fluids, over-the-counter medications', 'low'],
                    ['Influenza', 'A viral infection that attacks your respiratory system', 'Antiviral medications, rest, fluids', 'medium'],
                    ['COVID-19', 'Infectious disease caused by the SARS-CoV-2 virus', 'Supportive care, antiviral medications', 'high'],
                    ['Migraine', 'A headache of varying intensity, often accompanied by nausea and sensitivity to light and sound', 'Pain relievers, preventive medications', 'medium'],
                    ['Hypertension', 'High blood pressure that can lead to severe health complications', 'Lifestyle changes, medications', 'medium']
                ];
                
                $stmt = $conn->prepare("INSERT INTO diseases (name, description, treatment, severity_level) VALUES (?, ?, ?, ?)");
                foreach ($sample_diseases as $disease) {
                    $stmt->execute($disease);
                }
                
                // Link diseases to symptoms
                $disease_symptoms = [
                    [1, 1, 'mild'], // Cold - Fever
                    [1, 3, 'moderate'], // Cold - Cough
                    [1, 6, 'moderate'], // Cold - Sore throat
                    [2, 1, 'severe'], // Influenza - Fever
                    [2, 2, 'moderate'], // Influenza - Headache
                    [2, 3, 'moderate'], // Influenza - Cough
                    [2, 4, 'severe'], // Influenza - Fatigue
                    [3, 1, 'moderate'], // COVID-19 - Fever
                    [3, 3, 'moderate'], // COVID-19 - Cough
                    [3, 7, 'severe'], // COVID-19 - Shortness of breath
                    [3, 4, 'severe'], // COVID-19 - Fatigue
                    [4, 2, 'severe'], // Migraine - Headache
                    [4, 5, 'moderate'], // Migraine - Nausea
                    [4, 9, 'mild'], // Migraine - Dizziness
                    [5, 8, 'mild'], // Hypertension - Chest pain
                    [5, 2, 'mild'], // Hypertension - Headache
                    [5, 9, 'moderate'] // Hypertension - Dizziness
                ];
                
                $stmt = $conn->prepare("INSERT INTO disease_symptoms (disease_id, symptom_id, severity) VALUES (?, ?, ?)");
                foreach ($disease_symptoms as $ds) {
                    $stmt->execute($ds);
                }
                
                // Add specializations for diseases
                $disease_specializations = [
                    [1, 'General Practitioner'],
                    [1, 'ENT Specialist'],
                    [2, 'General Practitioner'],
                    [2, 'Infectious Disease'],
                    [3, 'Infectious Disease'],
                    [3, 'Pulmonologist'],
                    [4, 'Neurologist'],
                    [5, 'Cardiologist']
                ];
                
                $stmt = $conn->prepare("INSERT INTO disease_specializations (disease_id, specialization) VALUES (?, ?)");
                foreach ($disease_specializations as $ds) {
                    $stmt->execute($ds);
                }
            }
            
        } catch (PDOException $e) {
            error_log("Error creating tables: " . $e->getMessage());
            // Continue with the API request even if table creation fails
        }
    }

    // Get POST data
    $data = json_decode(file_get_contents('php://input'), true);
    $symptoms = isset($data['symptoms']) ? $data['symptoms'] : [];

    if (empty($symptoms)) {
        http_response_code(400);
        echo json_encode(['error' => 'No symptoms provided']);
        exit;
    }

    // First, get the symptom IDs from the names
    $symptomIds = [];
    foreach ($symptoms as $symptomName) {
        $stmt = $conn->prepare("SELECT id FROM symptoms WHERE name = ?");
        $stmt->execute([$symptomName]);
        $id = $stmt->fetchColumn();
        if ($id) {
            $symptomIds[] = $id;
        }
    }
    
    if (empty($symptomIds)) {
        // No matching symptoms found
        echo json_encode([
            'diseases' => [],
            'recommended_doctors' => []
        ]);
        
        // Still save the search history
        $symptomsStr = implode(',', $symptoms);
        $stmt = $conn->prepare("
            INSERT INTO symptom_search_history (patient_id, symptoms, diseases_found, recommended_doctors)
            VALUES (?, ?, ?, ?)
        ");
        $stmt->execute([$patient['id'], $symptomsStr, '[]', '[]']);
        
        exit;
    }
    
    // Create placeholders for the IN clause
    $placeholders = implode(',', array_fill(0, count($symptomIds), '?'));
    
    // Search for diseases based on symptom IDs
    $stmt = $conn->prepare("
        SELECT DISTINCT d.*
        FROM diseases d
        JOIN disease_symptoms ds ON d.id = ds.disease_id
        WHERE ds.symptom_id IN ($placeholders)
        GROUP BY d.id
        ORDER BY COUNT(DISTINCT ds.symptom_id) DESC
    ");
    $stmt->execute($symptomIds);
    $diseases = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    // Get specializations for each disease
    $specializations = [];
    foreach ($diseases as $key => $disease) {
        $stmt = $conn->prepare("
            SELECT specialization 
            FROM disease_specializations 
            WHERE disease_id = ?
        ");
        $stmt->execute([$disease['id']]);
        $specs = $stmt->fetchAll(PDO::FETCH_COLUMN);
        $diseases[$key]['specializations'] = $specs;
        $specializations = array_merge($specializations, $specs);
    }
    $specializations = array_unique($specializations);
    
    // Get recommended doctors
    $doctors = [];
    if (!empty($specializations)) {
        try {
            // Create placeholders for the IN clause
            $specPlaceholders = implode(',', array_fill(0, count($specializations), '?'));
            
            // Prepare the parameters array with all specializations
            $params = $specializations;
            
            // Log the query and parameters for debugging
            error_log("Doctor query: SELECT DISTINCT d.*, u.name, u.email FROM doctors d JOIN users u ON d.user_id = u.id WHERE d.specialization IN ($specPlaceholders) AND d.availability_status = 'available' ORDER BY d.experience_years DESC");
            error_log("Doctor params: " . implode(', ', $params));
            
            // First check if any doctors match these specializations exactly
            $checkStmt = $conn->prepare("
                SELECT COUNT(*) FROM doctors 
                WHERE specialization IN ($specPlaceholders)
            ");
            $checkStmt->execute($specializations);
            $doctorCount = $checkStmt->fetchColumn();
            
            if ($doctorCount > 0) {
                $stmt = $conn->prepare("
                    SELECT DISTINCT d.*, u.name, u.email
                    FROM doctors d
                    JOIN users u ON d.user_id = u.id
                    WHERE d.specialization IN ($specPlaceholders)
                    AND d.availability_status = 'available'
                    ORDER BY d.experience_years DESC
                ");
                $stmt->execute($specializations);
                $doctors = $stmt->fetchAll(PDO::FETCH_ASSOC);
            } else {
                // If no exact matches, try partial matches using LIKE
                $likeParams = [];
                $likeConditions = [];
                
                foreach ($specializations as $spec) {
                    $likeConditions[] = "d.specialization LIKE ?";
                    $likeParams[] = "%$spec%";
                }
                
                $likeQuery = implode(' OR ', $likeConditions);
                
                $stmt = $conn->prepare("
                    SELECT DISTINCT d.*, u.name, u.email
                    FROM doctors d
                    JOIN users u ON d.user_id = u.id
                    WHERE ($likeQuery)
                    AND d.availability_status = 'available'
                    ORDER BY d.experience_years DESC
                ");
                $stmt->execute($likeParams);
                $doctors = $stmt->fetchAll(PDO::FETCH_ASSOC);
                
                // If still no doctors, get general practitioners
                if (empty($doctors)) {
                    $stmt = $conn->prepare("
                        SELECT DISTINCT d.*, u.name, u.email
                        FROM doctors d
                        JOIN users u ON d.user_id = u.id
                        WHERE (d.specialization = 'General Practice' OR d.specialization = 'Family Medicine')
                        AND d.availability_status = 'available'
                        ORDER BY d.experience_years DESC
                        LIMIT 3
                    ");
                    $stmt->execute();
                    $doctors = $stmt->fetchAll(PDO::FETCH_ASSOC);
                    
                    // If still no doctors, get any available doctors
                    if (empty($doctors)) {
                        $stmt = $conn->prepare("
                            SELECT DISTINCT d.*, u.name, u.email
                            FROM doctors d
                            JOIN users u ON d.user_id = u.id
                            WHERE d.availability_status = 'available'
                            ORDER BY d.experience_years DESC
                            LIMIT 3
                        ");
                        $stmt->execute();
                        $doctors = $stmt->fetchAll(PDO::FETCH_ASSOC);
                    }
                }
            }
        } catch (PDOException $e) {
            error_log("Error in doctor query: " . $e->getMessage());
            // Continue with empty doctors array
            $doctors = [];
        }
    } else {
        // If no specializations found, get general practitioners
        try {
            $stmt = $conn->prepare("
                SELECT DISTINCT d.*, u.name, u.email
                FROM doctors d
                JOIN users u ON d.user_id = u.id
                WHERE (d.specialization = 'General Practice' OR d.specialization = 'Family Medicine')
                AND d.availability_status = 'available'
                ORDER BY d.experience_years DESC
                LIMIT 3
            ");
            $stmt->execute();
            $doctors = $stmt->fetchAll(PDO::FETCH_ASSOC);
            
            // If no general practitioners, get any available doctors
            if (empty($doctors)) {
                $stmt = $conn->prepare("
                    SELECT DISTINCT d.*, u.name, u.email
                    FROM doctors d
                    JOIN users u ON d.user_id = u.id
                    WHERE d.availability_status = 'available'
                    ORDER BY d.experience_years DESC
                    LIMIT 3
                ");
                $stmt->execute();
                $doctors = $stmt->fetchAll(PDO::FETCH_ASSOC);
            }
        } catch (PDOException $e) {
            error_log("Error in fallback doctor query: " . $e->getMessage());
            // Continue with empty doctors array
        }
    }
    
    // Save search history
    try {
        $symptomsStr = implode(',', $symptoms);
        $diseasesStr = json_encode(array_column($diseases, 'name'));
        $doctorsStr = json_encode(array_column($doctors, 'name'));
        
        $stmt = $conn->prepare("
            INSERT INTO symptom_search_history (patient_id, symptoms, diseases_found, recommended_doctors)
            VALUES (?, ?, ?, ?)
        ");
        $stmt->execute([$patient['id'], $symptomsStr, $diseasesStr, $doctorsStr]);
    } catch (PDOException $e) {
        error_log("Error saving search history: " . $e->getMessage());
        // Continue without saving search history
    }
    
    // Return results
    echo json_encode([
        'diseases' => $diseases,
        'recommended_doctors' => $doctors
    ]);
    
} catch (PDOException $e) {
    error_log("Error in process_symptom_search: " . $e->getMessage());
    http_response_code(500);
    echo json_encode(['error' => 'Database error: ' . $e->getMessage()]);
} catch (Exception $e) {
    error_log("General error in process_symptom_search: " . $e->getMessage());
    http_response_code(500);
    echo json_encode(['error' => 'Server error: ' . $e->getMessage()]);
}
?> 